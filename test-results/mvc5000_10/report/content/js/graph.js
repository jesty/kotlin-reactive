/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 504.0, "minX": 0.0, "maxY": 3294.0, "series": [{"data": [[0.0, 504.0], [0.1, 512.0], [0.2, 523.0], [0.3, 534.0], [0.4, 539.0], [0.5, 542.0], [0.6, 550.0], [0.7, 555.0], [0.8, 558.0], [0.9, 567.0], [1.0, 610.0], [1.1, 623.0], [1.2, 646.0], [1.3, 667.0], [1.4, 692.0], [1.5, 697.0], [1.6, 698.0], [1.7, 699.0], [1.8, 699.0], [1.9, 699.0], [2.0, 701.0], [2.1, 702.0], [2.2, 716.0], [2.3, 726.0], [2.4, 731.0], [2.5, 736.0], [2.6, 736.0], [2.7, 737.0], [2.8, 738.0], [2.9, 739.0], [3.0, 741.0], [3.1, 742.0], [3.2, 743.0], [3.3, 744.0], [3.4, 745.0], [3.5, 745.0], [3.6, 746.0], [3.7, 747.0], [3.8, 747.0], [3.9, 748.0], [4.0, 750.0], [4.1, 763.0], [4.2, 766.0], [4.3, 772.0], [4.4, 777.0], [4.5, 780.0], [4.6, 783.0], [4.7, 785.0], [4.8, 786.0], [4.9, 788.0], [5.0, 789.0], [5.1, 791.0], [5.2, 791.0], [5.3, 792.0], [5.4, 793.0], [5.5, 794.0], [5.6, 803.0], [5.7, 805.0], [5.8, 808.0], [5.9, 810.0], [6.0, 813.0], [6.1, 815.0], [6.2, 818.0], [6.3, 822.0], [6.4, 825.0], [6.5, 827.0], [6.6, 832.0], [6.7, 835.0], [6.8, 836.0], [6.9, 837.0], [7.0, 840.0], [7.1, 847.0], [7.2, 855.0], [7.3, 860.0], [7.4, 862.0], [7.5, 864.0], [7.6, 867.0], [7.7, 867.0], [7.8, 869.0], [7.9, 872.0], [8.0, 875.0], [8.1, 878.0], [8.2, 880.0], [8.3, 882.0], [8.4, 883.0], [8.5, 884.0], [8.6, 885.0], [8.7, 886.0], [8.8, 887.0], [8.9, 889.0], [9.0, 889.0], [9.1, 891.0], [9.2, 892.0], [9.3, 894.0], [9.4, 896.0], [9.5, 897.0], [9.6, 897.0], [9.7, 898.0], [9.8, 901.0], [9.9, 903.0], [10.0, 904.0], [10.1, 906.0], [10.2, 907.0], [10.3, 908.0], [10.4, 909.0], [10.5, 910.0], [10.6, 912.0], [10.7, 920.0], [10.8, 924.0], [10.9, 925.0], [11.0, 927.0], [11.1, 928.0], [11.2, 930.0], [11.3, 933.0], [11.4, 934.0], [11.5, 937.0], [11.6, 940.0], [11.7, 942.0], [11.8, 943.0], [11.9, 945.0], [12.0, 945.0], [12.1, 951.0], [12.2, 974.0], [12.3, 975.0], [12.4, 981.0], [12.5, 989.0], [12.6, 994.0], [12.7, 996.0], [12.8, 1004.0], [12.9, 1025.0], [13.0, 1034.0], [13.1, 1038.0], [13.2, 1040.0], [13.3, 1041.0], [13.4, 1044.0], [13.5, 1048.0], [13.6, 1048.0], [13.7, 1050.0], [13.8, 1053.0], [13.9, 1055.0], [14.0, 1060.0], [14.1, 1063.0], [14.2, 1064.0], [14.3, 1065.0], [14.4, 1065.0], [14.5, 1066.0], [14.6, 1067.0], [14.7, 1067.0], [14.8, 1069.0], [14.9, 1070.0], [15.0, 1071.0], [15.1, 1072.0], [15.2, 1074.0], [15.3, 1077.0], [15.4, 1078.0], [15.5, 1079.0], [15.6, 1080.0], [15.7, 1082.0], [15.8, 1086.0], [15.9, 1088.0], [16.0, 1090.0], [16.1, 1092.0], [16.2, 1092.0], [16.3, 1095.0], [16.4, 1096.0], [16.5, 1098.0], [16.6, 1101.0], [16.7, 1104.0], [16.8, 1106.0], [16.9, 1109.0], [17.0, 1111.0], [17.1, 1114.0], [17.2, 1138.0], [17.3, 1142.0], [17.4, 1144.0], [17.5, 1147.0], [17.6, 1149.0], [17.7, 1151.0], [17.8, 1153.0], [17.9, 1155.0], [18.0, 1156.0], [18.1, 1157.0], [18.2, 1159.0], [18.3, 1162.0], [18.4, 1165.0], [18.5, 1166.0], [18.6, 1168.0], [18.7, 1170.0], [18.8, 1171.0], [18.9, 1173.0], [19.0, 1175.0], [19.1, 1179.0], [19.2, 1183.0], [19.3, 1186.0], [19.4, 1187.0], [19.5, 1190.0], [19.6, 1195.0], [19.7, 1199.0], [19.8, 1200.0], [19.9, 1201.0], [20.0, 1202.0], [20.1, 1203.0], [20.2, 1204.0], [20.3, 1205.0], [20.4, 1206.0], [20.5, 1207.0], [20.6, 1208.0], [20.7, 1209.0], [20.8, 1212.0], [20.9, 1212.0], [21.0, 1214.0], [21.1, 1216.0], [21.2, 1217.0], [21.3, 1218.0], [21.4, 1219.0], [21.5, 1241.0], [21.6, 1244.0], [21.7, 1247.0], [21.8, 1250.0], [21.9, 1251.0], [22.0, 1252.0], [22.1, 1253.0], [22.2, 1259.0], [22.3, 1261.0], [22.4, 1264.0], [22.5, 1266.0], [22.6, 1267.0], [22.7, 1268.0], [22.8, 1273.0], [22.9, 1276.0], [23.0, 1278.0], [23.1, 1282.0], [23.2, 1283.0], [23.3, 1286.0], [23.4, 1288.0], [23.5, 1291.0], [23.6, 1295.0], [23.7, 1298.0], [23.8, 1300.0], [23.9, 1300.0], [24.0, 1302.0], [24.1, 1303.0], [24.2, 1305.0], [24.3, 1306.0], [24.4, 1307.0], [24.5, 1310.0], [24.6, 1312.0], [24.7, 1314.0], [24.8, 1315.0], [24.9, 1316.0], [25.0, 1317.0], [25.1, 1317.0], [25.2, 1319.0], [25.3, 1320.0], [25.4, 1326.0], [25.5, 1331.0], [25.6, 1344.0], [25.7, 1349.0], [25.8, 1351.0], [25.9, 1355.0], [26.0, 1356.0], [26.1, 1358.0], [26.2, 1364.0], [26.3, 1366.0], [26.4, 1368.0], [26.5, 1372.0], [26.6, 1374.0], [26.7, 1375.0], [26.8, 1376.0], [26.9, 1378.0], [27.0, 1381.0], [27.1, 1382.0], [27.2, 1383.0], [27.3, 1387.0], [27.4, 1389.0], [27.5, 1392.0], [27.6, 1395.0], [27.7, 1397.0], [27.8, 1399.0], [27.9, 1403.0], [28.0, 1405.0], [28.1, 1406.0], [28.2, 1408.0], [28.3, 1409.0], [28.4, 1410.0], [28.5, 1411.0], [28.6, 1411.0], [28.7, 1413.0], [28.8, 1414.0], [28.9, 1415.0], [29.0, 1416.0], [29.1, 1420.0], [29.2, 1420.0], [29.3, 1422.0], [29.4, 1422.0], [29.5, 1423.0], [29.6, 1426.0], [29.7, 1428.0], [29.8, 1435.0], [29.9, 1440.0], [30.0, 1450.0], [30.1, 1456.0], [30.2, 1461.0], [30.3, 1464.0], [30.4, 1466.0], [30.5, 1469.0], [30.6, 1474.0], [30.7, 1476.0], [30.8, 1476.0], [30.9, 1478.0], [31.0, 1479.0], [31.1, 1481.0], [31.2, 1485.0], [31.3, 1487.0], [31.4, 1492.0], [31.5, 1496.0], [31.6, 1503.0], [31.7, 1508.0], [31.8, 1510.0], [31.9, 1510.0], [32.0, 1511.0], [32.1, 1512.0], [32.2, 1514.0], [32.3, 1516.0], [32.4, 1519.0], [32.5, 1521.0], [32.6, 1524.0], [32.7, 1525.0], [32.8, 1528.0], [32.9, 1530.0], [33.0, 1531.0], [33.1, 1532.0], [33.2, 1535.0], [33.3, 1542.0], [33.4, 1550.0], [33.5, 1558.0], [33.6, 1560.0], [33.7, 1563.0], [33.8, 1566.0], [33.9, 1567.0], [34.0, 1570.0], [34.1, 1571.0], [34.2, 1573.0], [34.3, 1575.0], [34.4, 1576.0], [34.5, 1578.0], [34.6, 1582.0], [34.7, 1586.0], [34.8, 1588.0], [34.9, 1589.0], [35.0, 1590.0], [35.1, 1592.0], [35.2, 1593.0], [35.3, 1594.0], [35.4, 1596.0], [35.5, 1598.0], [35.6, 1600.0], [35.7, 1603.0], [35.8, 1606.0], [35.9, 1610.0], [36.0, 1616.0], [36.1, 1618.0], [36.2, 1620.0], [36.3, 1624.0], [36.4, 1626.0], [36.5, 1626.0], [36.6, 1629.0], [36.7, 1631.0], [36.8, 1633.0], [36.9, 1635.0], [37.0, 1638.0], [37.1, 1638.0], [37.2, 1641.0], [37.3, 1643.0], [37.4, 1646.0], [37.5, 1650.0], [37.6, 1653.0], [37.7, 1658.0], [37.8, 1662.0], [37.9, 1663.0], [38.0, 1665.0], [38.1, 1667.0], [38.2, 1668.0], [38.3, 1669.0], [38.4, 1670.0], [38.5, 1671.0], [38.6, 1672.0], [38.7, 1675.0], [38.8, 1677.0], [38.9, 1679.0], [39.0, 1682.0], [39.1, 1682.0], [39.2, 1686.0], [39.3, 1687.0], [39.4, 1689.0], [39.5, 1692.0], [39.6, 1693.0], [39.7, 1695.0], [39.8, 1698.0], [39.9, 1699.0], [40.0, 1704.0], [40.1, 1705.0], [40.2, 1712.0], [40.3, 1715.0], [40.4, 1720.0], [40.5, 1725.0], [40.6, 1728.0], [40.7, 1732.0], [40.8, 1735.0], [40.9, 1736.0], [41.0, 1737.0], [41.1, 1738.0], [41.2, 1740.0], [41.3, 1740.0], [41.4, 1742.0], [41.5, 1745.0], [41.6, 1748.0], [41.7, 1749.0], [41.8, 1751.0], [41.9, 1756.0], [42.0, 1758.0], [42.1, 1765.0], [42.2, 1767.0], [42.3, 1770.0], [42.4, 1771.0], [42.5, 1772.0], [42.6, 1773.0], [42.7, 1775.0], [42.8, 1776.0], [42.9, 1778.0], [43.0, 1779.0], [43.1, 1780.0], [43.2, 1783.0], [43.3, 1785.0], [43.4, 1788.0], [43.5, 1792.0], [43.6, 1797.0], [43.7, 1797.0], [43.8, 1800.0], [43.9, 1800.0], [44.0, 1801.0], [44.1, 1802.0], [44.2, 1805.0], [44.3, 1806.0], [44.4, 1814.0], [44.5, 1818.0], [44.6, 1823.0], [44.7, 1828.0], [44.8, 1832.0], [44.9, 1835.0], [45.0, 1838.0], [45.1, 1840.0], [45.2, 1842.0], [45.3, 1845.0], [45.4, 1846.0], [45.5, 1846.0], [45.6, 1849.0], [45.7, 1850.0], [45.8, 1852.0], [45.9, 1854.0], [46.0, 1858.0], [46.1, 1860.0], [46.2, 1864.0], [46.3, 1866.0], [46.4, 1867.0], [46.5, 1871.0], [46.6, 1872.0], [46.7, 1876.0], [46.8, 1877.0], [46.9, 1878.0], [47.0, 1880.0], [47.1, 1881.0], [47.2, 1883.0], [47.3, 1885.0], [47.4, 1886.0], [47.5, 1888.0], [47.6, 1889.0], [47.7, 1893.0], [47.8, 1898.0], [47.9, 1900.0], [48.0, 1901.0], [48.1, 1902.0], [48.2, 1904.0], [48.3, 1906.0], [48.4, 1907.0], [48.5, 1910.0], [48.6, 1913.0], [48.7, 1919.0], [48.8, 1924.0], [48.9, 1925.0], [49.0, 1928.0], [49.1, 1929.0], [49.2, 1930.0], [49.3, 1931.0], [49.4, 1934.0], [49.5, 1934.0], [49.6, 1935.0], [49.7, 1936.0], [49.8, 1937.0], [49.9, 1938.0], [50.0, 1940.0], [50.1, 1942.0], [50.2, 1947.0], [50.3, 1948.0], [50.4, 1949.0], [50.5, 1951.0], [50.6, 1953.0], [50.7, 1955.0], [50.8, 1962.0], [50.9, 1963.0], [51.0, 1968.0], [51.1, 1975.0], [51.2, 1977.0], [51.3, 1978.0], [51.4, 1980.0], [51.5, 1981.0], [51.6, 1982.0], [51.7, 1983.0], [51.8, 1985.0], [51.9, 1988.0], [52.0, 1994.0], [52.1, 1998.0], [52.2, 2004.0], [52.3, 2006.0], [52.4, 2008.0], [52.5, 2009.0], [52.6, 2010.0], [52.7, 2013.0], [52.8, 2017.0], [52.9, 2023.0], [53.0, 2026.0], [53.1, 2029.0], [53.2, 2033.0], [53.3, 2039.0], [53.4, 2044.0], [53.5, 2046.0], [53.6, 2048.0], [53.7, 2050.0], [53.8, 2051.0], [53.9, 2053.0], [54.0, 2056.0], [54.1, 2058.0], [54.2, 2062.0], [54.3, 2063.0], [54.4, 2065.0], [54.5, 2066.0], [54.6, 2068.0], [54.7, 2071.0], [54.8, 2076.0], [54.9, 2080.0], [55.0, 2080.0], [55.1, 2083.0], [55.2, 2084.0], [55.3, 2085.0], [55.4, 2086.0], [55.5, 2087.0], [55.6, 2088.0], [55.7, 2089.0], [55.8, 2090.0], [55.9, 2092.0], [56.0, 2094.0], [56.1, 2095.0], [56.2, 2098.0], [56.3, 2103.0], [56.4, 2105.0], [56.5, 2109.0], [56.6, 2110.0], [56.7, 2111.0], [56.8, 2114.0], [56.9, 2116.0], [57.0, 2117.0], [57.1, 2122.0], [57.2, 2129.0], [57.3, 2131.0], [57.4, 2135.0], [57.5, 2139.0], [57.6, 2141.0], [57.7, 2150.0], [57.8, 2152.0], [57.9, 2154.0], [58.0, 2156.0], [58.1, 2158.0], [58.2, 2159.0], [58.3, 2161.0], [58.4, 2163.0], [58.5, 2165.0], [58.6, 2166.0], [58.7, 2169.0], [58.8, 2171.0], [58.9, 2173.0], [59.0, 2175.0], [59.1, 2180.0], [59.2, 2185.0], [59.3, 2188.0], [59.4, 2189.0], [59.5, 2190.0], [59.6, 2190.0], [59.7, 2191.0], [59.8, 2193.0], [59.9, 2194.0], [60.0, 2196.0], [60.1, 2199.0], [60.2, 2200.0], [60.3, 2203.0], [60.4, 2204.0], [60.5, 2206.0], [60.6, 2210.0], [60.7, 2213.0], [60.8, 2215.0], [60.9, 2217.0], [61.0, 2219.0], [61.1, 2220.0], [61.2, 2223.0], [61.3, 2226.0], [61.4, 2231.0], [61.5, 2235.0], [61.6, 2238.0], [61.7, 2239.0], [61.8, 2243.0], [61.9, 2247.0], [62.0, 2252.0], [62.1, 2258.0], [62.2, 2259.0], [62.3, 2260.0], [62.4, 2263.0], [62.5, 2263.0], [62.6, 2265.0], [62.7, 2267.0], [62.8, 2270.0], [62.9, 2271.0], [63.0, 2274.0], [63.1, 2275.0], [63.2, 2279.0], [63.3, 2281.0], [63.4, 2286.0], [63.5, 2289.0], [63.6, 2292.0], [63.7, 2293.0], [63.8, 2294.0], [63.9, 2294.0], [64.0, 2295.0], [64.1, 2299.0], [64.2, 2299.0], [64.3, 2301.0], [64.4, 2302.0], [64.5, 2304.0], [64.6, 2307.0], [64.7, 2308.0], [64.8, 2310.0], [64.9, 2312.0], [65.0, 2315.0], [65.1, 2319.0], [65.2, 2320.0], [65.3, 2324.0], [65.4, 2326.0], [65.5, 2330.0], [65.6, 2335.0], [65.7, 2338.0], [65.8, 2341.0], [65.9, 2345.0], [66.0, 2353.0], [66.1, 2356.0], [66.2, 2359.0], [66.3, 2362.0], [66.4, 2363.0], [66.5, 2365.0], [66.6, 2368.0], [66.7, 2370.0], [66.8, 2372.0], [66.9, 2374.0], [67.0, 2378.0], [67.1, 2383.0], [67.2, 2387.0], [67.3, 2391.0], [67.4, 2392.0], [67.5, 2396.0], [67.6, 2398.0], [67.7, 2399.0], [67.8, 2400.0], [67.9, 2401.0], [68.0, 2404.0], [68.1, 2406.0], [68.2, 2407.0], [68.3, 2408.0], [68.4, 2410.0], [68.5, 2411.0], [68.6, 2412.0], [68.7, 2416.0], [68.8, 2417.0], [68.9, 2419.0], [69.0, 2420.0], [69.1, 2423.0], [69.2, 2425.0], [69.3, 2428.0], [69.4, 2430.0], [69.5, 2432.0], [69.6, 2433.0], [69.7, 2436.0], [69.8, 2437.0], [69.9, 2440.0], [70.0, 2443.0], [70.1, 2447.0], [70.2, 2456.0], [70.3, 2458.0], [70.4, 2463.0], [70.5, 2465.0], [70.6, 2468.0], [70.7, 2472.0], [70.8, 2474.0], [70.9, 2475.0], [71.0, 2476.0], [71.1, 2479.0], [71.2, 2484.0], [71.3, 2487.0], [71.4, 2488.0], [71.5, 2494.0], [71.6, 2497.0], [71.7, 2500.0], [71.8, 2506.0], [71.9, 2509.0], [72.0, 2512.0], [72.1, 2516.0], [72.2, 2517.0], [72.3, 2518.0], [72.4, 2520.0], [72.5, 2521.0], [72.6, 2523.0], [72.7, 2525.0], [72.8, 2526.0], [72.9, 2528.0], [73.0, 2529.0], [73.1, 2529.0], [73.2, 2530.0], [73.3, 2531.0], [73.4, 2533.0], [73.5, 2535.0], [73.6, 2539.0], [73.7, 2540.0], [73.8, 2541.0], [73.9, 2542.0], [74.0, 2544.0], [74.1, 2545.0], [74.2, 2550.0], [74.3, 2552.0], [74.4, 2556.0], [74.5, 2559.0], [74.6, 2565.0], [74.7, 2567.0], [74.8, 2569.0], [74.9, 2572.0], [75.0, 2575.0], [75.1, 2578.0], [75.2, 2579.0], [75.3, 2581.0], [75.4, 2585.0], [75.5, 2588.0], [75.6, 2592.0], [75.7, 2596.0], [75.8, 2599.0], [75.9, 2603.0], [76.0, 2606.0], [76.1, 2611.0], [76.2, 2616.0], [76.3, 2618.0], [76.4, 2620.0], [76.5, 2621.0], [76.6, 2622.0], [76.7, 2625.0], [76.8, 2625.0], [76.9, 2626.0], [77.0, 2627.0], [77.1, 2629.0], [77.2, 2630.0], [77.3, 2632.0], [77.4, 2634.0], [77.5, 2634.0], [77.6, 2636.0], [77.7, 2637.0], [77.8, 2639.0], [77.9, 2641.0], [78.0, 2643.0], [78.1, 2645.0], [78.2, 2646.0], [78.3, 2648.0], [78.4, 2650.0], [78.5, 2651.0], [78.6, 2656.0], [78.7, 2659.0], [78.8, 2662.0], [78.9, 2670.0], [79.0, 2671.0], [79.1, 2674.0], [79.2, 2676.0], [79.3, 2679.0], [79.4, 2683.0], [79.5, 2684.0], [79.6, 2686.0], [79.7, 2689.0], [79.8, 2693.0], [79.9, 2694.0], [80.0, 2700.0], [80.1, 2703.0], [80.2, 2707.0], [80.3, 2710.0], [80.4, 2717.0], [80.5, 2719.0], [80.6, 2720.0], [80.7, 2722.0], [80.8, 2725.0], [80.9, 2727.0], [81.0, 2728.0], [81.1, 2729.0], [81.2, 2730.0], [81.3, 2732.0], [81.4, 2734.0], [81.5, 2735.0], [81.6, 2736.0], [81.7, 2737.0], [81.8, 2740.0], [81.9, 2741.0], [82.0, 2743.0], [82.1, 2745.0], [82.2, 2748.0], [82.3, 2749.0], [82.4, 2750.0], [82.5, 2752.0], [82.6, 2752.0], [82.7, 2755.0], [82.8, 2756.0], [82.9, 2762.0], [83.0, 2766.0], [83.1, 2768.0], [83.2, 2774.0], [83.3, 2777.0], [83.4, 2778.0], [83.5, 2785.0], [83.6, 2792.0], [83.7, 2798.0], [83.8, 2803.0], [83.9, 2813.0], [84.0, 2819.0], [84.1, 2821.0], [84.2, 2827.0], [84.3, 2829.0], [84.4, 2832.0], [84.5, 2834.0], [84.6, 2835.0], [84.7, 2838.0], [84.8, 2841.0], [84.9, 2843.0], [85.0, 2845.0], [85.1, 2847.0], [85.2, 2849.0], [85.3, 2852.0], [85.4, 2853.0], [85.5, 2855.0], [85.6, 2856.0], [85.7, 2859.0], [85.8, 2860.0], [85.9, 2865.0], [86.0, 2867.0], [86.1, 2872.0], [86.2, 2878.0], [86.3, 2880.0], [86.4, 2881.0], [86.5, 2883.0], [86.6, 2886.0], [86.7, 2889.0], [86.8, 2893.0], [86.9, 2895.0], [87.0, 2897.0], [87.1, 2902.0], [87.2, 2905.0], [87.3, 2908.0], [87.4, 2913.0], [87.5, 2917.0], [87.6, 2920.0], [87.7, 2923.0], [87.8, 2929.0], [87.9, 2930.0], [88.0, 2931.0], [88.1, 2933.0], [88.2, 2934.0], [88.3, 2936.0], [88.4, 2938.0], [88.5, 2940.0], [88.6, 2943.0], [88.7, 2944.0], [88.8, 2946.0], [88.9, 2947.0], [89.0, 2949.0], [89.1, 2950.0], [89.2, 2952.0], [89.3, 2953.0], [89.4, 2956.0], [89.5, 2957.0], [89.6, 2958.0], [89.7, 2960.0], [89.8, 2961.0], [89.9, 2962.0], [90.0, 2965.0], [90.1, 2967.0], [90.2, 2970.0], [90.3, 2973.0], [90.4, 2979.0], [90.5, 2981.0], [90.6, 2983.0], [90.7, 2985.0], [90.8, 2988.0], [90.9, 2990.0], [91.0, 2993.0], [91.1, 2995.0], [91.2, 3002.0], [91.3, 3004.0], [91.4, 3008.0], [91.5, 3013.0], [91.6, 3016.0], [91.7, 3019.0], [91.8, 3022.0], [91.9, 3027.0], [92.0, 3030.0], [92.1, 3032.0], [92.2, 3033.0], [92.3, 3034.0], [92.4, 3038.0], [92.5, 3040.0], [92.6, 3044.0], [92.7, 3045.0], [92.8, 3048.0], [92.9, 3050.0], [93.0, 3051.0], [93.1, 3053.0], [93.2, 3053.0], [93.3, 3058.0], [93.4, 3058.0], [93.5, 3059.0], [93.6, 3065.0], [93.7, 3067.0], [93.8, 3068.0], [93.9, 3069.0], [94.0, 3073.0], [94.1, 3073.0], [94.2, 3079.0], [94.3, 3082.0], [94.4, 3084.0], [94.5, 3089.0], [94.6, 3091.0], [94.7, 3093.0], [94.8, 3096.0], [94.9, 3100.0], [95.0, 3102.0], [95.1, 3104.0], [95.2, 3107.0], [95.3, 3111.0], [95.4, 3112.0], [95.5, 3116.0], [95.6, 3117.0], [95.7, 3118.0], [95.8, 3122.0], [95.9, 3124.0], [96.0, 3128.0], [96.1, 3130.0], [96.2, 3131.0], [96.3, 3135.0], [96.4, 3139.0], [96.5, 3142.0], [96.6, 3144.0], [96.7, 3147.0], [96.8, 3152.0], [96.9, 3154.0], [97.0, 3159.0], [97.1, 3164.0], [97.2, 3167.0], [97.3, 3168.0], [97.4, 3177.0], [97.5, 3184.0], [97.6, 3196.0], [97.7, 3201.0], [97.8, 3208.0], [97.9, 3210.0], [98.0, 3215.0], [98.1, 3219.0], [98.2, 3223.0], [98.3, 3225.0], [98.4, 3231.0], [98.5, 3236.0], [98.6, 3238.0], [98.7, 3242.0], [98.8, 3244.0], [98.9, 3247.0], [99.0, 3248.0], [99.1, 3251.0], [99.2, 3256.0], [99.3, 3259.0], [99.4, 3262.0], [99.5, 3265.0], [99.6, 3268.0], [99.7, 3273.0], [99.8, 3276.0], [99.9, 3283.0]], "isOverall": false, "label": "Simple request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 43.0, "minX": 500.0, "maxY": 201.0, "series": [{"data": [[600.0, 43.0], [700.0, 170.0], [800.0, 193.0], [900.0, 141.0], [1000.0, 178.0], [1100.0, 149.0], [1200.0, 186.0], [1300.0, 188.0], [1400.0, 173.0], [1500.0, 189.0], [1600.0, 201.0], [1700.0, 180.0], [1800.0, 191.0], [1900.0, 198.0], [2000.0, 192.0], [2100.0, 182.0], [2200.0, 188.0], [2300.0, 163.0], [2400.0, 185.0], [2500.0, 192.0], [2600.0, 194.0], [2700.0, 175.0], [2800.0, 154.0], [2900.0, 193.0], [3000.0, 171.0], [3100.0, 130.0], [3200.0, 109.0], [500.0, 46.0]], "isOverall": false, "label": "Simple request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1468.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3186.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1468.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3186.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 761.7082079931256, "minX": 1.57453554E12, "maxY": 761.7082079931256, "series": [{"data": [[1.57453554E12, 761.7082079931256]], "isOverall": false, "label": "Main test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57453554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 618.2121212121211, "minX": 2.0, "maxY": 3288.0, "series": [{"data": [[2.0, 3212.5], [5.0, 3206.0], [6.0, 3215.0], [8.0, 3212.0], [9.0, 3219.0], [10.0, 3218.0], [13.0, 3224.0], [15.0, 3224.5], [20.0, 3233.6], [23.0, 3239.0], [24.0, 3244.0], [29.0, 3246.4], [35.0, 3251.0], [34.0, 3243.2], [39.0, 3251.75], [44.0, 3260.8], [49.0, 3261.75], [48.0, 3265.0], [54.0, 3269.8], [57.0, 3190.6666666666665], [59.0, 3196.0], [58.0, 3197.0], [62.0, 3199.3333333333335], [67.0, 3210.0], [65.0, 3208.0], [64.0, 3203.5], [71.0, 3214.0], [69.0, 3215.0], [68.0, 3209.0], [75.0, 3225.0], [74.0, 3222.0], [73.0, 3218.3333333333335], [79.0, 3231.0], [78.0, 3224.0], [77.0, 3228.5], [80.0, 3231.0], [87.0, 3244.0], [85.0, 3243.0], [84.0, 3238.25], [90.0, 3246.6666666666665], [89.0, 3243.0], [95.0, 3256.0], [94.0, 3253.0], [92.0, 3252.0], [99.0, 3267.5], [98.0, 3259.0], [100.0, 3266.0], [105.0, 3271.0], [104.0, 3270.5], [110.0, 3288.0], [109.0, 3277.0], [108.0, 3281.0], [115.0, 3286.25], [114.0, 3276.0], [117.0, 3086.0], [116.0, 3094.0], [122.0, 3086.8], [126.0, 3033.3333333333335], [125.0, 3034.0], [135.0, 3051.0], [134.0, 3047.0], [132.0, 3044.0], [131.0, 3042.3333333333335], [130.0, 3038.0], [141.0, 3054.0], [140.0, 3053.3333333333335], [137.0, 3061.0], [136.0, 3051.0], [151.0, 3073.2], [146.0, 3068.0], [145.0, 3063.25], [157.0, 3053.0], [156.0, 3056.25], [152.0, 3069.0], [167.0, 3082.0], [166.0, 3074.3333333333335], [164.0, 3065.0], [162.0, 3067.0], [161.0, 3056.0], [160.0, 3063.0], [173.0, 3073.0], [172.0, 3073.0], [171.0, 3073.0], [170.0, 3081.3333333333335], [181.0, 3096.0], [180.0, 3097.3333333333335], [177.0, 3093.0], [176.0, 3091.6666666666665], [191.0, 3112.4], [186.0, 3105.6], [199.0, 3090.0], [198.0, 3114.0], [197.0, 3124.0], [196.0, 3119.6], [207.0, 3153.0], [204.0, 3100.0], [203.0, 3100.5], [202.0, 3092.0], [200.0, 3101.0], [214.0, 3117.0], [213.0, 3117.0], [212.0, 3108.6666666666665], [209.0, 3116.0], [208.0, 3113.0], [222.0, 3142.0], [219.0, 3129.0], [218.0, 3120.25], [229.0, 3131.0], [228.0, 3139.0], [224.0, 3129.0], [239.0, 3144.0], [238.0, 3144.75], [234.0, 3135.0], [233.0, 3136.5], [244.0, 3152.0], [243.0, 3150.25], [255.0, 3087.0], [254.0, 3166.75], [252.0, 3172.0], [249.0, 3161.0], [269.0, 3108.0], [270.0, 3112.0], [268.0, 3107.0], [266.0, 3105.0], [265.0, 3103.0], [264.0, 3098.6666666666665], [261.0, 3092.0], [259.0, 3093.0], [258.0, 3086.0], [257.0, 3080.0], [275.0, 3123.0], [285.0, 3129.0], [284.0, 3130.0], [282.0, 3134.0], [281.0, 3167.0], [280.0, 3124.0], [279.0, 3125.0], [277.0, 3119.0], [274.0, 3117.0], [273.0, 3116.0], [272.0, 3111.0], [303.0, 3162.5], [300.0, 3154.0], [299.0, 3155.0], [298.0, 3149.5], [295.0, 3154.6666666666665], [293.0, 3146.0], [290.0, 3136.0], [289.0, 3134.0], [315.0, 3177.0], [314.0, 3173.0], [310.0, 3183.0], [309.0, 3163.6666666666665], [305.0, 3173.0], [304.0, 3169.5], [335.0, 2949.0], [332.0, 2938.0], [331.0, 2943.0], [330.0, 2937.5], [326.0, 2936.5], [322.0, 2987.0], [320.0, 2983.8], [350.0, 2970.0], [351.0, 2965.3333333333335], [349.0, 2960.0], [346.0, 2954.0], [345.0, 2963.0], [342.0, 2960.0], [341.0, 2952.0], [340.0, 2952.6666666666665], [337.0, 2946.3333333333335], [336.0, 2943.0], [367.0, 2951.3333333333335], [366.0, 2951.0], [363.0, 2946.0], [362.0, 2941.6666666666665], [359.0, 2936.0], [358.0, 2948.0], [357.0, 2931.0], [356.0, 2932.6666666666665], [353.0, 2933.0], [352.0, 2933.0], [383.0, 2966.0], [382.0, 1868.5], [381.0, 1854.5], [380.0, 1121.8333333333333], [369.0, 2957.0], [368.0, 2951.0], [379.0, 2968.0], [378.0, 2962.0], [377.0, 2957.0], [376.0, 2961.0], [374.0, 2952.0], [373.0, 2958.0], [372.0, 2957.0], [396.0, 1523.1666666666667], [390.0, 1021.3333333333333], [388.0, 1262.5], [389.0, 1508.0], [392.0, 710.875], [391.0, 1116.6], [386.0, 1319.75], [387.0, 2981.0], [385.0, 1647.8], [393.0, 1263.4444444444443], [394.0, 956.5], [395.0, 780.5384615384617], [399.0, 1152.1666666666667], [398.0, 955.2500000000001], [397.0, 790.5], [402.0, 770.375], [414.0, 1428.5714285714287], [413.0, 1893.25], [403.0, 2263.0], [410.0, 1142.5], [407.0, 804.5555555555555], [406.0, 773.5], [411.0, 786.5], [409.0, 1264.4444444444443], [415.0, 822.6666666666666], [408.0, 2272.0], [404.0, 1232.0], [405.0, 1146.5714285714284], [401.0, 1017.4444444444446], [400.0, 1397.2857142857142], [419.0, 1234.2], [431.0, 797.5], [429.0, 1526.0], [430.0, 3032.0], [428.0, 2305.0], [427.0, 1241.4], [425.0, 798.75], [424.0, 1943.5], [426.0, 850.5], [423.0, 786.5], [422.0, 1918.5], [420.0, 850.1111111111111], [421.0, 873.6666666666666], [418.0, 2055.428571428571], [417.0, 820.2222222222222], [416.0, 777.8571428571429], [444.0, 1596.1818181818182], [432.0, 618.2121212121211], [435.0, 746.5833333333334], [434.0, 1406.0], [433.0, 1047.7777777777778], [437.0, 770.7777777777778], [436.0, 1273.6999999999998], [439.0, 970.4000000000001], [438.0, 1272.0], [440.0, 792.0], [442.0, 854.8181818181819], [441.0, 1150.142857142857], [443.0, 816.0], [445.0, 1145.5714285714284], [446.0, 798.1428571428571], [447.0, 716.2222222222222], [461.0, 816.8], [460.0, 851.6666666666666], [462.0, 831.5], [463.0, 1805.6666666666667], [459.0, 1520.6666666666665], [458.0, 2146.6], [457.0, 889.0], [456.0, 3013.0], [449.0, 1690.1818181818185], [450.0, 1171.375], [452.0, 897.3333333333334], [453.0, 1255.1666666666667], [455.0, 891.0], [454.0, 2516.25], [448.0, 893.875], [451.0, 897.75], [465.0, 1553.6666666666665], [468.0, 773.6250000000001], [469.0, 1963.5], [470.0, 1292.0], [464.0, 790.8333333333334], [471.0, 909.0], [467.0, 1210.75], [466.0, 750.5789473684212], [479.0, 1144.2], [475.0, 945.0], [474.0, 1960.75], [473.0, 931.6666666666666], [472.0, 1947.0], [478.0, 1349.0], [477.0, 1979.3333333333333], [476.0, 945.0], [483.0, 943.0], [488.0, 919.1111111111111], [495.0, 2013.5], [494.0, 3038.0], [493.0, 3038.6666666666665], [489.0, 2517.5], [490.0, 3033.0], [487.0, 1188.375], [486.0, 920.6666666666667], [485.0, 1774.0], [484.0, 1631.6666666666665], [482.0, 1985.5], [481.0, 934.1666666666666], [480.0, 1355.6], [498.0, 975.25], [501.0, 993.7500000000001], [500.0, 3048.2], [503.0, 2232.6], [504.0, 1010.0], [505.0, 1687.8333333333333], [502.0, 990.0], [497.0, 979.6666666666667], [510.0, 3063.6666666666665], [508.0, 3068.5], [540.0, 1838.7142857142856], [542.0, 1084.5], [543.0, 2267.3333333333335], [529.0, 1648.1666666666667], [528.0, 1050.375], [531.0, 1261.222222222222], [530.0, 1360.5], [533.0, 1420.8], [532.0, 1191.5714285714284], [541.0, 1674.6666666666665], [539.0, 1081.0], [538.0, 1078.25], [537.0, 1431.6], [536.0, 1370.6666666666667], [527.0, 1053.0], [515.0, 3069.6666666666665], [514.0, 3068.0], [513.0, 3079.0], [526.0, 1647.6666666666665], [519.0, 1348.3333333333333], [518.0, 1037.0], [517.0, 1038.0], [525.0, 1412.2], [524.0, 1767.2], [523.0, 1049.0], [522.0, 1456.7777777777778], [521.0, 1049.125], [520.0, 1606.1538461538462], [535.0, 1292.375], [534.0, 1422.8], [546.0, 1974.25], [554.0, 1297.2222222222222], [555.0, 1109.3333333333335], [557.0, 1979.25], [558.0, 2832.0], [556.0, 1971.0], [553.0, 1596.8571428571427], [551.0, 2109.0], [568.0, 2853.0], [571.0, 2001.0], [570.0, 1143.0], [573.0, 1716.6666666666667], [574.0, 1575.75], [575.0, 1150.0], [562.0, 2836.0], [560.0, 2839.0], [567.0, 2845.5], [563.0, 2846.0], [572.0, 1427.1666666666667], [552.0, 1103.25], [550.0, 1975.5], [547.0, 1094.8461538461538], [549.0, 1098.0], [548.0, 1099.0], [544.0, 1086.0], [545.0, 1309.6249999999998], [600.0, 1354.181818181818], [606.0, 1494.3333333333333], [607.0, 1426.25], [592.0, 1519.8], [593.0, 1179.0], [595.0, 1612.0], [597.0, 1613.5], [596.0, 1912.5714285714284], [603.0, 1491.083333333333], [602.0, 1201.5454545454545], [591.0, 2027.1999999999998], [576.0, 1636.2857142857144], [577.0, 1154.5714285714284], [579.0, 1154.0], [578.0, 1833.4], [581.0, 1440.8333333333333], [580.0, 1499.1000000000001], [583.0, 2295.0], [582.0, 1154.0], [590.0, 1177.0], [589.0, 1184.6666666666667], [588.0, 1167.75], [586.0, 1595.25], [587.0, 1170.0], [585.0, 1320.818181818182], [584.0, 1164.0], [599.0, 1409.125], [598.0, 1196.0], [601.0, 1365.2], [605.0, 1547.4], [604.0, 1391.6666666666667], [635.0, 1820.2222222222222], [608.0, 1213.6666666666665], [623.0, 1801.6666666666665], [622.0, 2082.0], [619.0, 2915.3333333333335], [617.0, 2911.5], [609.0, 1638.125], [610.0, 1639.75], [613.0, 2903.3333333333335], [632.0, 1815.1666666666667], [614.0, 2918.0], [639.0, 1275.5], [625.0, 1244.0], [627.0, 1247.6666666666667], [624.0, 2251.0], [630.0, 1669.75], [629.0, 1419.6000000000001], [628.0, 1764.8461538461538], [638.0, 1283.5], [636.0, 1504.5714285714287], [637.0, 1267.4], [634.0, 1262.0], [633.0, 1259.5], [646.0, 1287.0], [659.0, 1488.7777777777778], [662.0, 1629.3], [661.0, 1318.3333333333333], [660.0, 1435.6923076923076], [657.0, 1484.4444444444443], [658.0, 2092.0], [656.0, 1304.4], [654.0, 1940.8461538461538], [655.0, 1436.0], [641.0, 1693.5], [642.0, 2942.0], [640.0, 2227.285714285714], [644.0, 1698.0], [645.0, 1842.0], [643.0, 1283.6666666666667], [647.0, 1618.0], [667.0, 1330.0], [666.0, 2885.0], [665.0, 2886.0], [668.0, 2889.0], [664.0, 1948.2], [670.0, 2117.0], [671.0, 2895.0], [669.0, 1851.3333333333333], [653.0, 1299.25], [652.0, 1302.0], [651.0, 1297.857142857143], [650.0, 1299.0], [649.0, 1623.0], [648.0, 2121.25], [700.0, 1785.5], [677.0, 1353.0], [678.0, 1870.0], [697.0, 1390.6250000000002], [696.0, 1381.0], [679.0, 1938.0], [676.0, 1321.6666666666667], [673.0, 1787.5714285714284], [675.0, 2127.0], [674.0, 2125.5], [672.0, 1344.0], [687.0, 1989.4], [686.0, 1372.0], [685.0, 1885.0], [684.0, 2054.0], [683.0, 1365.6666666666667], [682.0, 1358.0], [681.0, 1364.6], [680.0, 1875.0], [703.0, 1403.0], [688.0, 1376.5555555555557], [690.0, 2151.5], [689.0, 1549.888888888889], [692.0, 1899.0], [691.0, 1394.0], [694.0, 2049.714285714286], [695.0, 1560.7777777777778], [693.0, 1383.0], [702.0, 1403.0], [701.0, 1784.0], [699.0, 1829.8571428571427], [698.0, 2429.0], [711.0, 1419.8], [706.0, 1669.0], [714.0, 2041.0], [715.0, 1678.6666666666667], [719.0, 1428.0], [718.0, 1426.0], [713.0, 1420.5], [712.0, 1612.1875], [731.0, 1838.1], [727.0, 1700.2], [726.0, 2727.0], [725.0, 2727.5], [723.0, 2082.5], [722.0, 1881.5], [720.0, 2550.166666666667], [735.0, 1469.0], [734.0, 1464.6666666666667], [732.0, 1887.6666666666667], [733.0, 1462.5], [730.0, 1460.9999999999998], [728.0, 2728.0], [710.0, 2079.0], [709.0, 1413.7142857142856], [707.0, 1580.4444444444446], [708.0, 1411.0], [705.0, 1769.8823529411766], [704.0, 1408.1666666666667], [761.0, 1514.75], [766.0, 1527.1428571428573], [765.0, 1523.8750000000002], [767.0, 1829.25], [752.0, 2720.0], [754.0, 1748.6], [753.0, 2114.5], [760.0, 1509.4], [743.0, 1484.0], [742.0, 1483.6666666666667], [741.0, 1619.5555555555557], [738.0, 1474.7777777777778], [736.0, 2483.8], [737.0, 1462.0], [739.0, 1474.6666666666667], [740.0, 2322.166666666667], [751.0, 2396.0], [749.0, 1493.0], [748.0, 1490.0], [747.0, 1492.6666666666667], [746.0, 2437.25], [745.0, 1913.3333333333333], [744.0, 1623.888888888889], [759.0, 1672.9333333333334], [758.0, 1509.4], [757.0, 2119.0], [756.0, 2725.0], [755.0, 1911.0], [764.0, 1827.0], [763.0, 2330.0], [762.0, 2121.0], [795.0, 1582.2], [768.0, 1774.4], [783.0, 2041.7], [782.0, 1567.0], [781.0, 1559.0], [780.0, 1550.0], [779.0, 2754.0], [778.0, 2753.3333333333335], [770.0, 1777.6], [772.0, 2756.0], [774.0, 2750.0], [773.0, 2747.0], [775.0, 1656.2352941176473], [792.0, 1585.0], [769.0, 1532.0], [799.0, 1583.8235294117646], [787.0, 1803.6], [786.0, 1968.8333333333335], [785.0, 1567.75], [790.0, 1575.3333333333333], [789.0, 2174.0], [791.0, 2380.3333333333335], [788.0, 1572.3333333333333], [784.0, 1738.0], [798.0, 1599.75], [797.0, 1584.4], [794.0, 1580.0909090909092], [793.0, 1572.25], [796.0, 2322.0], [825.0, 1647.3333333333333], [830.0, 1891.6], [828.0, 1849.0], [800.0, 1951.6], [801.0, 1988.3333333333335], [804.0, 1998.6666666666667], [803.0, 1603.0], [806.0, 2200.0], [824.0, 2526.25], [805.0, 2494.5], [815.0, 2019.0], [814.0, 2214.0], [813.0, 1621.5], [811.0, 1616.5], [812.0, 2090.0], [809.0, 2118.0], [808.0, 1602.0], [810.0, 2202.0], [829.0, 2118.4], [826.0, 1648.0], [827.0, 2039.1666666666665], [822.0, 1787.375], [823.0, 2029.0], [820.0, 1629.3333333333333], [818.0, 1631.0000000000002], [817.0, 1628.0], [816.0, 2217.5], [831.0, 2048.0], [819.0, 2222.8333333333335], [821.0, 1634.5], [837.0, 1668.5], [841.0, 1792.6999999999998], [840.0, 1818.0], [844.0, 2070.6666666666665], [843.0, 1700.0], [842.0, 1679.5], [846.0, 1880.1666666666667], [832.0, 1663.0], [847.0, 1882.3333333333333], [845.0, 2382.6], [838.0, 1670.6666666666667], [839.0, 2058.6666666666665], [857.0, 2035.0], [859.0, 2693.0], [858.0, 2685.0], [856.0, 2194.5], [862.0, 2300.4], [860.0, 1712.8], [850.0, 1797.1818181818182], [849.0, 2155.4], [848.0, 1689.0], [863.0, 2205.5], [836.0, 1863.6666666666665], [835.0, 2247.375], [834.0, 1664.0], [833.0, 1666.0], [853.0, 1703.7142857142856], [852.0, 2470.6666666666665], [855.0, 1707.5], [854.0, 2472.0], [851.0, 1691.2222222222224], [889.0, 1961.9], [882.0, 1755.0], [894.0, 1951.090909090909], [893.0, 1779.2], [895.0, 1970.2], [892.0, 2097.3333333333335], [890.0, 1882.222222222222], [891.0, 2018.75], [878.0, 2228.0], [865.0, 1732.6666666666667], [879.0, 2077.3333333333335], [868.0, 2049.0], [867.0, 1727.25], [866.0, 2456.75], [871.0, 1736.6666666666665], [888.0, 1772.6363636363635], [870.0, 1733.1249999999998], [869.0, 1731.0], [877.0, 1742.6666666666667], [876.0, 1881.7142857142858], [875.0, 1740.8], [874.0, 2061.0], [872.0, 2170.3333333333335], [873.0, 1935.2], [886.0, 1764.6666666666667], [887.0, 2538.0], [885.0, 1765.0], [884.0, 1761.25], [883.0, 2721.75], [881.0, 1752.6666666666667], [880.0, 1757.0], [922.0, 2234.25], [902.0, 1799.6153846153848], [906.0, 1800.5714285714284], [904.0, 2043.25], [905.0, 2270.5], [908.0, 1812.25], [911.0, 1815.0], [910.0, 2674.8], [909.0, 1816.0], [903.0, 2428.3333333333335], [921.0, 1835.6666666666665], [920.0, 2534.833333333333], [898.0, 2004.2222222222222], [899.0, 2033.75], [900.0, 1958.5], [901.0, 2116.0], [897.0, 1899.6666666666667], [926.0, 1923.0], [927.0, 1850.8333333333335], [913.0, 1824.0], [912.0, 1825.0], [918.0, 1829.4], [915.0, 2682.2], [914.0, 1821.6666666666665], [925.0, 1941.4375], [923.0, 1996.0], [930.0, 1969.5384615384614], [944.0, 1884.2727272727273], [945.0, 1881.0], [947.0, 1890.0], [946.0, 2318.4285714285716], [949.0, 1893.0], [951.0, 2318.777777777778], [948.0, 1891.6666666666667], [942.0, 1932.8571428571427], [941.0, 2257.0], [940.0, 1948.9], [939.0, 1876.5], [936.0, 2020.7], [938.0, 1872.1666666666667], [931.0, 2116.0], [934.0, 2119.5], [952.0, 2002.857142857143], [935.0, 2629.0], [933.0, 1859.6666666666667], [954.0, 2048.0], [955.0, 1958.6153846153848], [956.0, 2626.0], [953.0, 2017.0], [958.0, 2011.7142857142858], [959.0, 2268.0], [957.0, 2089.25], [929.0, 2237.5], [943.0, 1884.0], [987.0, 2108.0], [978.0, 2014.0909090909092], [989.0, 2143.25], [990.0, 1974.3333333333333], [991.0, 2233.0], [976.0, 2183.3333333333335], [977.0, 2118.5], [988.0, 1965.75], [985.0, 1949.5], [986.0, 2662.0], [984.0, 2413.6666666666665], [975.0, 2029.0], [960.0, 1919.0], [961.0, 2628.0], [963.0, 2281.5], [962.0, 2090.5], [965.0, 1925.0], [966.0, 1926.5], [964.0, 2101.0], [967.0, 2460.5], [974.0, 2045.857142857143], [971.0, 2081.2], [972.0, 2297.0], [973.0, 2642.5], [970.0, 1929.3333333333333], [968.0, 2164.6666666666665], [969.0, 2646.0], [983.0, 1944.4285714285713], [982.0, 2098.8], [979.0, 2073.5], [980.0, 2061.8333333333335], [981.0, 2113.5], [1019.0, 2199.5], [995.0, 1983.4], [996.0, 2114.6], [997.0, 1988.0], [999.0, 1966.8333333333335], [1017.0, 2250.0], [1018.0, 2201.75], [1016.0, 2196.75], [1020.0, 2373.0], [1021.0, 2707.0], [1023.0, 2375.5], [1022.0, 2036.0], [998.0, 1972.75], [992.0, 2154.75], [1007.0, 2464.0], [1006.0, 2010.0], [1005.0, 2178.75], [994.0, 1945.5], [993.0, 2066.125], [1010.0, 2096.875], [1011.0, 2238.3333333333335], [1012.0, 2689.0], [1015.0, 2248.0], [1014.0, 2290.4], [1009.0, 2281.2], [1008.0, 1995.0000000000002], [1004.0, 2333.3333333333335], [1003.0, 1973.8], [1002.0, 2004.5], [1001.0, 2183.3333333333335], [1000.0, 2328.375], [1032.0, 2195.8], [1026.0, 2113.8], [1024.0, 2710.0], [1046.0, 2087.3636363636365], [1050.0, 2355.0999999999995], [1054.0, 2535.0], [1052.0, 2103.0], [1028.0, 2385.5], [1030.0, 2053.3333333333335], [1036.0, 2235.0], [1034.0, 2186.4375], [1048.0, 2088.6666666666665], [1044.0, 2247.125], [1042.0, 2077.5], [1040.0, 2243.0], [1072.0, 2340.0], [1076.0, 2144.25], [1078.0, 2428.0], [1082.0, 2421.0], [1080.0, 2155.4444444444443], [1084.0, 2166.3333333333335], [1086.0, 2394.0], [1056.0, 2240.714285714286], [1058.0, 2113.0], [1060.0, 2114.5], [1064.0, 2358.25], [1062.0, 2588.0], [1066.0, 2365.5], [1070.0, 2140.0], [1068.0, 2130.666666666667], [1038.0, 2072.2], [1144.0, 2288.0], [1088.0, 2285.75], [1100.0, 2283.6], [1102.0, 2198.0], [1136.0, 2386.444444444445], [1140.0, 2403.6666666666665], [1138.0, 2272.5], [1142.0, 2277.0], [1146.0, 2457.3333333333335], [1148.0, 2345.4], [1150.0, 2294.642857142857], [1120.0, 2301.4], [1122.0, 2381.25], [1124.0, 2243.0], [1126.0, 2305.0], [1128.0, 2342.3333333333335], [1130.0, 2293.4285714285716], [1134.0, 2259.5], [1132.0, 2301.285714285714], [1096.0, 2191.0], [1094.0, 2481.333333333333], [1098.0, 2266.8333333333335], [1092.0, 2177.5], [1090.0, 2328.3333333333335], [1112.0, 2222.3333333333335], [1110.0, 2393.5], [1108.0, 2211.5], [1106.0, 2206.0], [1104.0, 2392.2857142857147], [1116.0, 2394.0], [1118.0, 2301.0], [1114.0, 2220.3333333333335], [1162.0, 2344.777777777778], [1164.0, 2365.0], [1170.0, 2416.6], [1168.0, 2540.0], [1174.0, 2340.3333333333335], [1172.0, 2448.5], [1176.0, 2408.6666666666665], [1180.0, 2421.0], [1178.0, 2392.2], [1152.0, 2301.6666666666665], [1182.0, 2388.428571428571], [1200.0, 2443.3750000000005], [1166.0, 2426.0], [1202.0, 2397.625], [1206.0, 2406.3333333333335], [1204.0, 2455.1428571428573], [1208.0, 2441.0], [1212.0, 2476.6666666666665], [1210.0, 2475.0], [1214.0, 2442.0], [1186.0, 2461.5], [1184.0, 2426.3333333333335], [1188.0, 2388.9], [1192.0, 2421.75], [1190.0, 2409.8], [1196.0, 2478.25], [1194.0, 2508.3333333333335], [1198.0, 2390.2], [1160.0, 2384.6666666666665], [1158.0, 2365.75], [1156.0, 2369.1428571428573], [1154.0, 2301.6], [1264.0, 2524.5], [1220.0, 2493.0], [1222.0, 2438.5], [1218.0, 2454.25], [1216.0, 2424.7], [1246.0, 2484.25], [1244.0, 2635.0], [1242.0, 2479.0], [1236.0, 2515.0], [1234.0, 2504.25], [1232.0, 2462.0], [1238.0, 2495.428571428571], [1240.0, 2471.285714285714], [1274.0, 2540.8571428571427], [1250.0, 2536.5], [1252.0, 2504.0], [1254.0, 2621.6], [1258.0, 2516.0], [1260.0, 2519.2], [1262.0, 2525.25], [1270.0, 2545.0], [1268.0, 2533.0], [1266.0, 2530.0], [1228.0, 2602.0], [1226.0, 2445.2], [1224.0, 2612.0], [1230.0, 2458.5], [1272.0, 2537.5], [1031.0, 2055.6666666666665], [1047.0, 2085.625], [1049.0, 2186.0], [1051.0, 2095.6666666666665], [1025.0, 2045.5], [1055.0, 2108.0], [1027.0, 2047.0], [1033.0, 2225.5], [1029.0, 2252.0], [1035.0, 2197.2], [1045.0, 2139.5], [1043.0, 2302.6666666666665], [1041.0, 2735.0], [1039.0, 2468.2], [1073.0, 2596.0], [1075.0, 2301.5], [1079.0, 2160.3333333333335], [1077.0, 2152.166666666667], [1081.0, 2159.0], [1085.0, 2164.538461538462], [1083.0, 2279.25], [1057.0, 2189.1666666666665], [1087.0, 2283.0], [1059.0, 2349.5], [1061.0, 2248.0], [1063.0, 2117.0], [1067.0, 2318.4], [1069.0, 2316.8], [1143.0, 2287.5], [1099.0, 2224.9999999999995], [1093.0, 2175.0], [1101.0, 2270.5], [1103.0, 2201.5], [1137.0, 2321.4], [1139.0, 2275.0], [1141.0, 2318.3333333333335], [1149.0, 2289.6250000000005], [1147.0, 2286.833333333333], [1145.0, 2481.5], [1151.0, 2400.6], [1121.0, 2238.833333333333], [1123.0, 2295.4], [1129.0, 2257.0], [1125.0, 2379.75], [1127.0, 2521.0], [1131.0, 2324.5], [1135.0, 2269.0], [1133.0, 2266.5], [1097.0, 2234.4], [1095.0, 2300.5], [1091.0, 2181.0], [1089.0, 2324.6666666666665], [1111.0, 2220.6666666666665], [1107.0, 2212.3333333333335], [1105.0, 2281.333333333333], [1109.0, 2214.8333333333335], [1115.0, 2372.25], [1117.0, 2565.0], [1119.0, 2402.0], [1205.0, 2424.6666666666665], [1207.0, 2492.5], [1153.0, 2364.4285714285716], [1183.0, 2551.0], [1163.0, 2427.5], [1171.0, 2367.428571428571], [1173.0, 2542.0], [1175.0, 2410.833333333333], [1181.0, 2427.0], [1179.0, 2453.0], [1177.0, 2550.0], [1167.0, 2363.333333333333], [1201.0, 2455.166666666667], [1203.0, 2429.6666666666665], [1209.0, 2425.4545454545455], [1211.0, 2438.125], [1215.0, 2463.2], [1185.0, 2395.333333333333], [1187.0, 2393.5714285714284], [1191.0, 2440.0], [1189.0, 2436.0], [1197.0, 2433.25], [1193.0, 2383.5], [1199.0, 2392.0], [1213.0, 2448.833333333333], [1165.0, 2378.5], [1161.0, 2345.142857142857], [1159.0, 2424.0], [1157.0, 2335.375], [1155.0, 2411.0], [1231.0, 2539.25], [1271.0, 2540.6666666666665], [1219.0, 2492.3333333333335], [1217.0, 2487.6666666666665], [1247.0, 2643.0], [1245.0, 2489.2], [1243.0, 2574.2], [1241.0, 2503.3333333333335], [1237.0, 2475.6666666666665], [1235.0, 2471.0], [1233.0, 2569.6666666666665], [1239.0, 2552.0], [1221.0, 2438.2], [1249.0, 2541.166666666667], [1253.0, 2509.8], [1251.0, 2498.1666666666665], [1257.0, 2509.333333333333], [1261.0, 2519.0], [1259.0, 2516.0], [1263.0, 2527.0], [1269.0, 2529.6666666666665], [1267.0, 2529.0], [1265.0, 2526.5], [1229.0, 2482.3333333333335], [1223.0, 2532.0], [1227.0, 2571.75], [1273.0, 2537.5]], "isOverall": false, "label": "Simple request", "isController": false}, {"data": [[761.7114310270734, 1949.9724967769635]], "isOverall": false, "label": "Simple request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1274.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13419.033333333333, "minX": 1.57453554E12, "maxY": 19391.666666666668, "series": [{"data": [[1.57453554E12, 13419.033333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57453554E12, 19391.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57453554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1949.9724967769635, "minX": 1.57453554E12, "maxY": 1949.9724967769635, "series": [{"data": [[1.57453554E12, 1949.9724967769635]], "isOverall": false, "label": "Simple request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57453554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1949.333476579284, "minX": 1.57453554E12, "maxY": 1949.333476579284, "series": [{"data": [[1.57453554E12, 1949.333476579284]], "isOverall": false, "label": "Simple request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57453554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.877524709926948, "minX": 1.57453554E12, "maxY": 1.877524709926948, "series": [{"data": [[1.57453554E12, 1.877524709926948]], "isOverall": false, "label": "Simple request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57453554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 504.0, "minX": 1.57453554E12, "maxY": 3294.0, "series": [{"data": [[1.57453554E12, 3294.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57453554E12, 504.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57453554E12, 2965.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57453554E12, 3248.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57453554E12, 3102.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57453554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 708.5, "minX": 115.0, "maxY": 3243.0, "series": [{"data": [[354.0, 1567.0], [395.0, 1756.0], [390.0, 2839.5], [200.0, 708.5], [400.0, 2074.5], [115.0, 3243.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 400.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 708.5, "minX": 115.0, "maxY": 3243.0, "series": [{"data": [[354.0, 1567.0], [395.0, 1756.0], [390.0, 2839.0], [200.0, 708.5], [400.0, 2074.5], [115.0, 3243.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 400.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 77.56666666666666, "minX": 1.57453554E12, "maxY": 77.56666666666666, "series": [{"data": [[1.57453554E12, 77.56666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57453554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 77.56666666666666, "minX": 1.57453554E12, "maxY": 77.56666666666666, "series": [{"data": [[1.57453554E12, 77.56666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57453554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 77.56666666666666, "minX": 1.57453554E12, "maxY": 77.56666666666666, "series": [{"data": [[1.57453554E12, 77.56666666666666]], "isOverall": false, "label": "Simple request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57453554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 77.56666666666666, "minX": 1.57453554E12, "maxY": 77.56666666666666, "series": [{"data": [[1.57453554E12, 77.56666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57453554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

